// Auto-generated. Do not edit!

// (in-package auv_model.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let Sidescan = require('./Sidescan.js');

//-----------------------------------------------------------

class SssSimResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.sim_sss = null;
    }
    else {
      if (initObj.hasOwnProperty('sim_sss')) {
        this.sim_sss = initObj.sim_sss
      }
      else {
        this.sim_sss = new Sidescan();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type SssSimResult
    // Serialize message field [sim_sss]
    bufferOffset = Sidescan.serialize(obj.sim_sss, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type SssSimResult
    let len;
    let data = new SssSimResult(null);
    // Deserialize message field [sim_sss]
    data.sim_sss = Sidescan.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += Sidescan.getMessageSize(object.sim_sss);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'auv_model/SssSimResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'd921a9c276522dee262b1eb9fb1fd6ba';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the result
    auv_model/Sidescan sim_sss
    
    ================================================================================
    MSG: auv_model/Sidescan
    std_msgs/Header header
    uint8   type          # Packet Type, 0xE2 = Sonar 8 Bit
    uint32  time          # Ping time   [100 us]
    uint8   frequency_id  # Freq Id, currently 0x00
    int16   gain
    uint16  decimation
    float32 max_duration  # Max travel time of outermost bins (s)
    uint8[] port_channel
    uint8[] starboard_channel
    uint8[] extra_channel
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new SssSimResult(null);
    if (msg.sim_sss !== undefined) {
      resolved.sim_sss = Sidescan.Resolve(msg.sim_sss)
    }
    else {
      resolved.sim_sss = new Sidescan()
    }

    return resolved;
    }
};

module.exports = SssSimResult;
