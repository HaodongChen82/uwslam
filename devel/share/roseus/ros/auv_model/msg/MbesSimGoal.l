;; Auto-generated. Do not edit!


(when (boundp 'auv_model::MbesSimGoal)
  (if (not (find-package "AUV_MODEL"))
    (make-package "AUV_MODEL"))
  (shadow 'MbesSimGoal (find-package "AUV_MODEL")))
(unless (find-package "AUV_MODEL::MBESSIMGOAL")
  (make-package "AUV_MODEL::MBESSIMGOAL"))

(in-package "ROS")
;;//! \htmlinclude MbesSimGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass auv_model::MbesSimGoal
  :super ros::object
  :slots (_mbes_pose _beams_num ))

(defmethod auv_model::MbesSimGoal
  (:init
   (&key
    ((:mbes_pose __mbes_pose) (instance geometry_msgs::TransformStamped :init))
    ((:beams_num __beams_num) (instance std_msgs::Int32 :init))
    )
   (send-super :init)
   (setq _mbes_pose __mbes_pose)
   (setq _beams_num __beams_num)
   self)
  (:mbes_pose
   (&rest __mbes_pose)
   (if (keywordp (car __mbes_pose))
       (send* _mbes_pose __mbes_pose)
     (progn
       (if __mbes_pose (setq _mbes_pose (car __mbes_pose)))
       _mbes_pose)))
  (:beams_num
   (&rest __beams_num)
   (if (keywordp (car __beams_num))
       (send* _beams_num __beams_num)
     (progn
       (if __beams_num (setq _beams_num (car __beams_num)))
       _beams_num)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/TransformStamped _mbes_pose
    (send _mbes_pose :serialization-length)
    ;; std_msgs/Int32 _beams_num
    (send _beams_num :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/TransformStamped _mbes_pose
       (send _mbes_pose :serialize s)
     ;; std_msgs/Int32 _beams_num
       (send _beams_num :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/TransformStamped _mbes_pose
     (send _mbes_pose :deserialize buf ptr-) (incf ptr- (send _mbes_pose :serialization-length))
   ;; std_msgs/Int32 _beams_num
     (send _beams_num :deserialize buf ptr-) (incf ptr- (send _beams_num :serialization-length))
   ;;
   self)
  )

(setf (get auv_model::MbesSimGoal :md5sum-) "5af4f6a3cf1b4f99f9ecc949508d2780")
(setf (get auv_model::MbesSimGoal :datatype-) "auv_model/MbesSimGoal")
(setf (get auv_model::MbesSimGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
geometry_msgs/TransformStamped mbes_pose
std_msgs/Int32 beams_num

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href=\"http://wiki.ros.org/tf\">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Int32
int32 data
")



(provide :auv_model/MbesSimGoal "5af4f6a3cf1b4f99f9ecc949508d2780")


