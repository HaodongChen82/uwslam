;; Auto-generated. Do not edit!


(when (boundp 'slam_msgs::ManipulatePosteriorGoal)
  (if (not (find-package "SLAM_MSGS"))
    (make-package "SLAM_MSGS"))
  (shadow 'ManipulatePosteriorGoal (find-package "SLAM_MSGS")))
(unless (find-package "SLAM_MSGS::MANIPULATEPOSTERIORGOAL")
  (make-package "SLAM_MSGS::MANIPULATEPOSTERIORGOAL"))

(in-package "ROS")
;;//! \htmlinclude ManipulatePosteriorGoal.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass slam_msgs::ManipulatePosteriorGoal
  :super ros::object
  :slots (_plot _sample _pings _track_position _track_orientation ))

(defmethod slam_msgs::ManipulatePosteriorGoal
  (:init
   (&key
    ((:plot __plot) nil)
    ((:sample __sample) nil)
    ((:pings __pings) (instance sensor_msgs::PointCloud2 :init))
    ((:track_position __track_position) (instance sensor_msgs::PointCloud2 :init))
    ((:track_orientation __track_orientation) (instance sensor_msgs::PointCloud2 :init))
    )
   (send-super :init)
   (setq _plot __plot)
   (setq _sample __sample)
   (setq _pings __pings)
   (setq _track_position __track_position)
   (setq _track_orientation __track_orientation)
   self)
  (:plot
   (&optional (__plot :null))
   (if (not (eq __plot :null)) (setq _plot __plot)) _plot)
  (:sample
   (&optional (__sample :null))
   (if (not (eq __sample :null)) (setq _sample __sample)) _sample)
  (:pings
   (&rest __pings)
   (if (keywordp (car __pings))
       (send* _pings __pings)
     (progn
       (if __pings (setq _pings (car __pings)))
       _pings)))
  (:track_position
   (&rest __track_position)
   (if (keywordp (car __track_position))
       (send* _track_position __track_position)
     (progn
       (if __track_position (setq _track_position (car __track_position)))
       _track_position)))
  (:track_orientation
   (&rest __track_orientation)
   (if (keywordp (car __track_orientation))
       (send* _track_orientation __track_orientation)
     (progn
       (if __track_orientation (setq _track_orientation (car __track_orientation)))
       _track_orientation)))
  (:serialization-length
   ()
   (+
    ;; bool _plot
    1
    ;; bool _sample
    1
    ;; sensor_msgs/PointCloud2 _pings
    (send _pings :serialization-length)
    ;; sensor_msgs/PointCloud2 _track_position
    (send _track_position :serialization-length)
    ;; sensor_msgs/PointCloud2 _track_orientation
    (send _track_orientation :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _plot
       (if _plot (write-byte -1 s) (write-byte 0 s))
     ;; bool _sample
       (if _sample (write-byte -1 s) (write-byte 0 s))
     ;; sensor_msgs/PointCloud2 _pings
       (send _pings :serialize s)
     ;; sensor_msgs/PointCloud2 _track_position
       (send _track_position :serialize s)
     ;; sensor_msgs/PointCloud2 _track_orientation
       (send _track_orientation :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _plot
     (setq _plot (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _sample
     (setq _sample (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; sensor_msgs/PointCloud2 _pings
     (send _pings :deserialize buf ptr-) (incf ptr- (send _pings :serialization-length))
   ;; sensor_msgs/PointCloud2 _track_position
     (send _track_position :deserialize buf ptr-) (incf ptr- (send _track_position :serialization-length))
   ;; sensor_msgs/PointCloud2 _track_orientation
     (send _track_orientation :deserialize buf ptr-) (incf ptr- (send _track_orientation :serialization-length))
   ;;
   self)
  )

(setf (get slam_msgs::ManipulatePosteriorGoal :md5sum-) "8b04f4e9d6ca23ba81a46ac8f4dc07f2")
(setf (get slam_msgs::ManipulatePosteriorGoal :datatype-) "slam_msgs/ManipulatePosteriorGoal")
(setf (get slam_msgs::ManipulatePosteriorGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
bool plot
bool sample
sensor_msgs/PointCloud2 pings
sensor_msgs/PointCloud2 track_position
sensor_msgs/PointCloud2 track_orientation

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the \"fields\" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

")



(provide :slam_msgs/ManipulatePosteriorGoal "8b04f4e9d6ca23ba81a46ac8f4dc07f2")


