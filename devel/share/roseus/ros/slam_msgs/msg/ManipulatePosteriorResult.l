;; Auto-generated. Do not edit!


(when (boundp 'slam_msgs::ManipulatePosteriorResult)
  (if (not (find-package "SLAM_MSGS"))
    (make-package "SLAM_MSGS"))
  (shadow 'ManipulatePosteriorResult (find-package "SLAM_MSGS")))
(unless (find-package "SLAM_MSGS::MANIPULATEPOSTERIORRESULT")
  (make-package "SLAM_MSGS::MANIPULATEPOSTERIORRESULT"))

(in-package "ROS")
;;//! \htmlinclude ManipulatePosteriorResult.msg.html


(defclass slam_msgs::ManipulatePosteriorResult
  :super ros::object
  :slots (_p_id _mu _sigma _success ))

(defmethod slam_msgs::ManipulatePosteriorResult
  (:init
   (&key
    ((:p_id __p_id) 0)
    ((:mu __mu) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:sigma __sigma) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:success __success) nil)
    )
   (send-super :init)
   (setq _p_id (round __p_id))
   (setq _mu __mu)
   (setq _sigma __sigma)
   (setq _success __success)
   self)
  (:p_id
   (&optional __p_id)
   (if __p_id (setq _p_id __p_id)) _p_id)
  (:mu
   (&optional __mu)
   (if __mu (setq _mu __mu)) _mu)
  (:sigma
   (&optional __sigma)
   (if __sigma (setq _sigma __sigma)) _sigma)
  (:success
   (&optional (__success :null))
   (if (not (eq __success :null)) (setq _success __success)) _success)
  (:serialization-length
   ()
   (+
    ;; int32 _p_id
    4
    ;; float64[] _mu
    (* 8    (length _mu)) 4
    ;; float64[] _sigma
    (* 8    (length _sigma)) 4
    ;; bool _success
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _p_id
       (write-long _p_id s)
     ;; float64[] _mu
     (write-long (length _mu) s)
     (dotimes (i (length _mu))
       (sys::poke (elt _mu i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64[] _sigma
     (write-long (length _sigma) s)
     (dotimes (i (length _sigma))
       (sys::poke (elt _sigma i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; bool _success
       (if _success (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _p_id
     (setq _p_id (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float64[] _mu
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _mu (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _mu i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; float64[] _sigma
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _sigma (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _sigma i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; bool _success
     (setq _success (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get slam_msgs::ManipulatePosteriorResult :md5sum-) "c563b6c2846f9ef65ae6f0196790efad")
(setf (get slam_msgs::ManipulatePosteriorResult :datatype-) "slam_msgs/ManipulatePosteriorResult")
(setf (get slam_msgs::ManipulatePosteriorResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition for sampling the posterior
int32 p_id
float64[] mu
float64[] sigma
bool success
# no result definition for saving/plotting the posterior

")



(provide :slam_msgs/ManipulatePosteriorResult "c563b6c2846f9ef65ae6f0196790efad")


