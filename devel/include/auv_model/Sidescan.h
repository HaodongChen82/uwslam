// Generated by gencpp from file auv_model/Sidescan.msg
// DO NOT EDIT!


#ifndef AUV_MODEL_MESSAGE_SIDESCAN_H
#define AUV_MODEL_MESSAGE_SIDESCAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace auv_model
{
template <class ContainerAllocator>
struct Sidescan_
{
  typedef Sidescan_<ContainerAllocator> Type;

  Sidescan_()
    : header()
    , type(0)
    , time(0)
    , frequency_id(0)
    , gain(0)
    , decimation(0)
    , max_duration(0.0)
    , port_channel()
    , starboard_channel()
    , extra_channel()  {
    }
  Sidescan_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , time(0)
    , frequency_id(0)
    , gain(0)
    , decimation(0)
    , max_duration(0.0)
    , port_channel(_alloc)
    , starboard_channel(_alloc)
    , extra_channel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint32_t _time_type;
  _time_type time;

   typedef uint8_t _frequency_id_type;
  _frequency_id_type frequency_id;

   typedef int16_t _gain_type;
  _gain_type gain;

   typedef uint16_t _decimation_type;
  _decimation_type decimation;

   typedef float _max_duration_type;
  _max_duration_type max_duration;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _port_channel_type;
  _port_channel_type port_channel;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _starboard_channel_type;
  _starboard_channel_type starboard_channel;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _extra_channel_type;
  _extra_channel_type extra_channel;





  typedef boost::shared_ptr< ::auv_model::Sidescan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_model::Sidescan_<ContainerAllocator> const> ConstPtr;

}; // struct Sidescan_

typedef ::auv_model::Sidescan_<std::allocator<void> > Sidescan;

typedef boost::shared_ptr< ::auv_model::Sidescan > SidescanPtr;
typedef boost::shared_ptr< ::auv_model::Sidescan const> SidescanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auv_model::Sidescan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auv_model::Sidescan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::auv_model::Sidescan_<ContainerAllocator1> & lhs, const ::auv_model::Sidescan_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.time == rhs.time &&
    lhs.frequency_id == rhs.frequency_id &&
    lhs.gain == rhs.gain &&
    lhs.decimation == rhs.decimation &&
    lhs.max_duration == rhs.max_duration &&
    lhs.port_channel == rhs.port_channel &&
    lhs.starboard_channel == rhs.starboard_channel &&
    lhs.extra_channel == rhs.extra_channel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::auv_model::Sidescan_<ContainerAllocator1> & lhs, const ::auv_model::Sidescan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace auv_model

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::auv_model::Sidescan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_model::Sidescan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_model::Sidescan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_model::Sidescan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_model::Sidescan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_model::Sidescan_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auv_model::Sidescan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11582401bb2ec522a6efe57254b1f054";
  }

  static const char* value(const ::auv_model::Sidescan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11582401bb2ec522ULL;
  static const uint64_t static_value2 = 0xa6efe57254b1f054ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_model::Sidescan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auv_model/Sidescan";
  }

  static const char* value(const ::auv_model::Sidescan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auv_model::Sidescan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint8   type          # Packet Type, 0xE2 = Sonar 8 Bit\n"
"uint32  time          # Ping time   [100 us]\n"
"uint8   frequency_id  # Freq Id, currently 0x00\n"
"int16   gain\n"
"uint16  decimation\n"
"float32 max_duration  # Max travel time of outermost bins (s)\n"
"uint8[] port_channel\n"
"uint8[] starboard_channel\n"
"uint8[] extra_channel\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::auv_model::Sidescan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auv_model::Sidescan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.time);
      stream.next(m.frequency_id);
      stream.next(m.gain);
      stream.next(m.decimation);
      stream.next(m.max_duration);
      stream.next(m.port_channel);
      stream.next(m.starboard_channel);
      stream.next(m.extra_channel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sidescan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_model::Sidescan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auv_model::Sidescan_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "frequency_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frequency_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gain: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gain);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "decimation: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.decimation);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "max_duration: ";
    Printer<float>::stream(s, indent + "  ", v.max_duration);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "port_channel: ";
    if (v.port_channel.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.port_channel.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.port_channel[i]);
    }
    if (v.port_channel.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "starboard_channel: ";
    if (v.starboard_channel.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.starboard_channel.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.starboard_channel[i]);
    }
    if (v.starboard_channel.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "extra_channel: ";
    if (v.extra_channel.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.extra_channel.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.extra_channel[i]);
    }
    if (v.extra_channel.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUV_MODEL_MESSAGE_SIDESCAN_H
