// Generated by gencpp from file auv_model/MbesSimFeedback.msg
// DO NOT EDIT!


#ifndef AUV_MODEL_MESSAGE_MBESSIMFEEDBACK_H
#define AUV_MODEL_MESSAGE_MBESSIMFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auv_model
{
template <class ContainerAllocator>
struct MbesSimFeedback_
{
  typedef MbesSimFeedback_<ContainerAllocator> Type;

  MbesSimFeedback_()
    : working(false)  {
    }
  MbesSimFeedback_(const ContainerAllocator& _alloc)
    : working(false)  {
  (void)_alloc;
    }



   typedef uint8_t _working_type;
  _working_type working;





  typedef boost::shared_ptr< ::auv_model::MbesSimFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_model::MbesSimFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MbesSimFeedback_

typedef ::auv_model::MbesSimFeedback_<std::allocator<void> > MbesSimFeedback;

typedef boost::shared_ptr< ::auv_model::MbesSimFeedback > MbesSimFeedbackPtr;
typedef boost::shared_ptr< ::auv_model::MbesSimFeedback const> MbesSimFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auv_model::MbesSimFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auv_model::MbesSimFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::auv_model::MbesSimFeedback_<ContainerAllocator1> & lhs, const ::auv_model::MbesSimFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.working == rhs.working;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::auv_model::MbesSimFeedback_<ContainerAllocator1> & lhs, const ::auv_model::MbesSimFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace auv_model

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_model::MbesSimFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_model::MbesSimFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_model::MbesSimFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a910f77ef929028adc42d31381cbaa5b";
  }

  static const char* value(const ::auv_model::MbesSimFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa910f77ef929028aULL;
  static const uint64_t static_value2 = 0xdc42d31381cbaa5bULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auv_model/MbesSimFeedback";
  }

  static const char* value(const ::auv_model::MbesSimFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"bool working\n"
"\n"
;
  }

  static const char* value(const ::auv_model::MbesSimFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.working);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MbesSimFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_model::MbesSimFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auv_model::MbesSimFeedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "working: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.working);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUV_MODEL_MESSAGE_MBESSIMFEEDBACK_H
