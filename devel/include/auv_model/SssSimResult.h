// Generated by gencpp from file auv_model/SssSimResult.msg
// DO NOT EDIT!


#ifndef AUV_MODEL_MESSAGE_SSSSIMRESULT_H
#define AUV_MODEL_MESSAGE_SSSSIMRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <auv_model/Sidescan.h>

namespace auv_model
{
template <class ContainerAllocator>
struct SssSimResult_
{
  typedef SssSimResult_<ContainerAllocator> Type;

  SssSimResult_()
    : sim_sss()  {
    }
  SssSimResult_(const ContainerAllocator& _alloc)
    : sim_sss(_alloc)  {
  (void)_alloc;
    }



   typedef  ::auv_model::Sidescan_<ContainerAllocator>  _sim_sss_type;
  _sim_sss_type sim_sss;





  typedef boost::shared_ptr< ::auv_model::SssSimResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_model::SssSimResult_<ContainerAllocator> const> ConstPtr;

}; // struct SssSimResult_

typedef ::auv_model::SssSimResult_<std::allocator<void> > SssSimResult;

typedef boost::shared_ptr< ::auv_model::SssSimResult > SssSimResultPtr;
typedef boost::shared_ptr< ::auv_model::SssSimResult const> SssSimResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auv_model::SssSimResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auv_model::SssSimResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::auv_model::SssSimResult_<ContainerAllocator1> & lhs, const ::auv_model::SssSimResult_<ContainerAllocator2> & rhs)
{
  return lhs.sim_sss == rhs.sim_sss;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::auv_model::SssSimResult_<ContainerAllocator1> & lhs, const ::auv_model::SssSimResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace auv_model

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::auv_model::SssSimResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_model::SssSimResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_model::SssSimResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_model::SssSimResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_model::SssSimResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_model::SssSimResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auv_model::SssSimResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d921a9c276522dee262b1eb9fb1fd6ba";
  }

  static const char* value(const ::auv_model::SssSimResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd921a9c276522deeULL;
  static const uint64_t static_value2 = 0x262b1eb9fb1fd6baULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_model::SssSimResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auv_model/SssSimResult";
  }

  static const char* value(const ::auv_model::SssSimResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auv_model::SssSimResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"auv_model/Sidescan sim_sss\n"
"\n"
"================================================================================\n"
"MSG: auv_model/Sidescan\n"
"std_msgs/Header header\n"
"uint8   type          # Packet Type, 0xE2 = Sonar 8 Bit\n"
"uint32  time          # Ping time   [100 us]\n"
"uint8   frequency_id  # Freq Id, currently 0x00\n"
"int16   gain\n"
"uint16  decimation\n"
"float32 max_duration  # Max travel time of outermost bins (s)\n"
"uint8[] port_channel\n"
"uint8[] starboard_channel\n"
"uint8[] extra_channel\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::auv_model::SssSimResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auv_model::SssSimResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sim_sss);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SssSimResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_model::SssSimResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auv_model::SssSimResult_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "sim_sss: ";
    Printer< ::auv_model::Sidescan_<ContainerAllocator> >::stream(s, indent + "  ", v.sim_sss);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUV_MODEL_MESSAGE_SSSSIMRESULT_H
