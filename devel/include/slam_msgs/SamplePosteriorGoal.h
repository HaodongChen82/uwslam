// Generated by gencpp from file slam_msgs/SamplePosteriorGoal.msg
// DO NOT EDIT!


#ifndef SLAM_MSGS_MESSAGE_SAMPLEPOSTERIORGOAL_H
#define SLAM_MSGS_MESSAGE_SAMPLEPOSTERIORGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slam_msgs
{
template <class ContainerAllocator>
struct SamplePosteriorGoal_
{
  typedef SamplePosteriorGoal_<ContainerAllocator> Type;

  SamplePosteriorGoal_()
    : n(0)
    , xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , subdivs(0)  {
    }
  SamplePosteriorGoal_(const ContainerAllocator& _alloc)
    : n(0)
    , xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , subdivs(0)  {
  (void)_alloc;
    }



   typedef int32_t _n_type;
  _n_type n;

   typedef double _xmin_type;
  _xmin_type xmin;

   typedef double _xmax_type;
  _xmax_type xmax;

   typedef double _ymin_type;
  _ymin_type ymin;

   typedef double _ymax_type;
  _ymax_type ymax;

   typedef int32_t _subdivs_type;
  _subdivs_type subdivs;





  typedef boost::shared_ptr< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SamplePosteriorGoal_

typedef ::slam_msgs::SamplePosteriorGoal_<std::allocator<void> > SamplePosteriorGoal;

typedef boost::shared_ptr< ::slam_msgs::SamplePosteriorGoal > SamplePosteriorGoalPtr;
typedef boost::shared_ptr< ::slam_msgs::SamplePosteriorGoal const> SamplePosteriorGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator1> & lhs, const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator2> & rhs)
{
  return lhs.n == rhs.n &&
    lhs.xmin == rhs.xmin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymin == rhs.ymin &&
    lhs.ymax == rhs.ymax &&
    lhs.subdivs == rhs.subdivs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator1> & lhs, const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f901b2c1454b044728cdcd5b0d0944c8";
  }

  static const char* value(const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf901b2c1454b0447ULL;
  static const uint64_t static_value2 = 0x28cdcd5b0d0944c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slam_msgs/SamplePosteriorGoal";
  }

  static const char* value(const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"int32 n\n"
"float64  xmin\n"
"float64  xmax\n"
"float64  ymin\n"
"float64  ymax\n"
"int32 subdivs\n"
;
  }

  static const char* value(const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n);
      stream.next(m.xmin);
      stream.next(m.xmax);
      stream.next(m.ymin);
      stream.next(m.ymax);
      stream.next(m.subdivs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SamplePosteriorGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slam_msgs::SamplePosteriorGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "xmin: ";
    Printer<double>::stream(s, indent + "  ", v.xmin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "xmax: ";
    Printer<double>::stream(s, indent + "  ", v.xmax);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ymin: ";
    Printer<double>::stream(s, indent + "  ", v.ymin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ymax: ";
    Printer<double>::stream(s, indent + "  ", v.ymax);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "subdivs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.subdivs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAM_MSGS_MESSAGE_SAMPLEPOSTERIORGOAL_H
