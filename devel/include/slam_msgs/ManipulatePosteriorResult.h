// Generated by gencpp from file slam_msgs/ManipulatePosteriorResult.msg
// DO NOT EDIT!


#ifndef SLAM_MSGS_MESSAGE_MANIPULATEPOSTERIORRESULT_H
#define SLAM_MSGS_MESSAGE_MANIPULATEPOSTERIORRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slam_msgs
{
template <class ContainerAllocator>
struct ManipulatePosteriorResult_
{
  typedef ManipulatePosteriorResult_<ContainerAllocator> Type;

  ManipulatePosteriorResult_()
    : p_id(0)
    , mu()
    , sigma()
    , success(false)  {
    }
  ManipulatePosteriorResult_(const ContainerAllocator& _alloc)
    : p_id(0)
    , mu(_alloc)
    , sigma(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef int32_t _p_id_type;
  _p_id_type p_id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _mu_type;
  _mu_type mu;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _sigma_type;
  _sigma_type sigma;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> const> ConstPtr;

}; // struct ManipulatePosteriorResult_

typedef ::slam_msgs::ManipulatePosteriorResult_<std::allocator<void> > ManipulatePosteriorResult;

typedef boost::shared_ptr< ::slam_msgs::ManipulatePosteriorResult > ManipulatePosteriorResultPtr;
typedef boost::shared_ptr< ::slam_msgs::ManipulatePosteriorResult const> ManipulatePosteriorResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator1> & lhs, const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator2> & rhs)
{
  return lhs.p_id == rhs.p_id &&
    lhs.mu == rhs.mu &&
    lhs.sigma == rhs.sigma &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator1> & lhs, const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c563b6c2846f9ef65ae6f0196790efad";
  }

  static const char* value(const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc563b6c2846f9ef6ULL;
  static const uint64_t static_value2 = 0x5ae6f0196790efadULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slam_msgs/ManipulatePosteriorResult";
  }

  static const char* value(const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition for sampling the posterior\n"
"int32 p_id\n"
"float64[] mu\n"
"float64[] sigma\n"
"bool success\n"
"# no result definition for saving/plotting the posterior\n"
;
  }

  static const char* value(const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p_id);
      stream.next(m.mu);
      stream.next(m.sigma);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipulatePosteriorResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slam_msgs::ManipulatePosteriorResult_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "p_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.p_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mu: ";
    if (v.mu.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.mu.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.mu[i]);
    }
    if (v.mu.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sigma: ";
    if (v.sigma.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.sigma.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.sigma[i]);
    }
    if (v.sigma.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAM_MSGS_MESSAGE_MANIPULATEPOSTERIORRESULT_H
