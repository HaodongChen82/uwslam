// Generated by gencpp from file slam_msgs/MinibatchTrainingGoal.msg
// DO NOT EDIT!


#ifndef SLAM_MSGS_MESSAGE_MINIBATCHTRAININGGOAL_H
#define SLAM_MSGS_MESSAGE_MINIBATCHTRAININGGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slam_msgs
{
template <class ContainerAllocator>
struct MinibatchTrainingGoal_
{
  typedef MinibatchTrainingGoal_<ContainerAllocator> Type;

  MinibatchTrainingGoal_()
    : particle_id(0)
    , mb_size(0)  {
    }
  MinibatchTrainingGoal_(const ContainerAllocator& _alloc)
    : particle_id(0)
    , mb_size(0)  {
  (void)_alloc;
    }



   typedef int32_t _particle_id_type;
  _particle_id_type particle_id;

   typedef int32_t _mb_size_type;
  _mb_size_type mb_size;





  typedef boost::shared_ptr< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MinibatchTrainingGoal_

typedef ::slam_msgs::MinibatchTrainingGoal_<std::allocator<void> > MinibatchTrainingGoal;

typedef boost::shared_ptr< ::slam_msgs::MinibatchTrainingGoal > MinibatchTrainingGoalPtr;
typedef boost::shared_ptr< ::slam_msgs::MinibatchTrainingGoal const> MinibatchTrainingGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator1> & lhs, const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator2> & rhs)
{
  return lhs.particle_id == rhs.particle_id &&
    lhs.mb_size == rhs.mb_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator1> & lhs, const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slam_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a6053386fd7d0a43b8fbe57150c1836";
  }

  static const char* value(const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a6053386fd7d0a4ULL;
  static const uint64_t static_value2 = 0x3b8fbe57150c1836ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slam_msgs/MinibatchTrainingGoal";
  }

  static const char* value(const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"int32 particle_id \n"
"int32 mb_size\n"
;
  }

  static const char* value(const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.particle_id);
      stream.next(m.mb_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MinibatchTrainingGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slam_msgs::MinibatchTrainingGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "particle_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.particle_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mb_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mb_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAM_MSGS_MESSAGE_MINIBATCHTRAININGGOAL_H
