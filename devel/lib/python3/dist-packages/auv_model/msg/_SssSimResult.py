# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auv_model/SssSimResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auv_model.msg
import std_msgs.msg

class SssSimResult(genpy.Message):
  _md5sum = "d921a9c276522dee262b1eb9fb1fd6ba"
  _type = "auv_model/SssSimResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
auv_model/Sidescan sim_sss

================================================================================
MSG: auv_model/Sidescan
std_msgs/Header header
uint8   type          # Packet Type, 0xE2 = Sonar 8 Bit
uint32  time          # Ping time   [100 us]
uint8   frequency_id  # Freq Id, currently 0x00
int16   gain
uint16  decimation
float32 max_duration  # Max travel time of outermost bins (s)
uint8[] port_channel
uint8[] starboard_channel
uint8[] extra_channel

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['sim_sss']
  _slot_types = ['auv_model/Sidescan']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sim_sss

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SssSimResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sim_sss is None:
        self.sim_sss = auv_model.msg.Sidescan()
    else:
      self.sim_sss = auv_model.msg.Sidescan()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.sim_sss.header.seq, _x.sim_sss.header.stamp.secs, _x.sim_sss.header.stamp.nsecs))
      _x = self.sim_sss.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BIBhHf().pack(_x.sim_sss.type, _x.sim_sss.time, _x.sim_sss.frequency_id, _x.sim_sss.gain, _x.sim_sss.decimation, _x.sim_sss.max_duration))
      _x = self.sim_sss.port_channel
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sim_sss.starboard_channel
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sim_sss.extra_channel
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sim_sss is None:
        self.sim_sss = auv_model.msg.Sidescan()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.sim_sss.header.seq, _x.sim_sss.header.stamp.secs, _x.sim_sss.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sim_sss.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sim_sss.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.sim_sss.type, _x.sim_sss.time, _x.sim_sss.frequency_id, _x.sim_sss.gain, _x.sim_sss.decimation, _x.sim_sss.max_duration,) = _get_struct_BIBhHf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sim_sss.port_channel = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sim_sss.starboard_channel = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sim_sss.extra_channel = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.sim_sss.header.seq, _x.sim_sss.header.stamp.secs, _x.sim_sss.header.stamp.nsecs))
      _x = self.sim_sss.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BIBhHf().pack(_x.sim_sss.type, _x.sim_sss.time, _x.sim_sss.frequency_id, _x.sim_sss.gain, _x.sim_sss.decimation, _x.sim_sss.max_duration))
      _x = self.sim_sss.port_channel
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sim_sss.starboard_channel
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sim_sss.extra_channel
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sim_sss is None:
        self.sim_sss = auv_model.msg.Sidescan()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.sim_sss.header.seq, _x.sim_sss.header.stamp.secs, _x.sim_sss.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sim_sss.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sim_sss.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.sim_sss.type, _x.sim_sss.time, _x.sim_sss.frequency_id, _x.sim_sss.gain, _x.sim_sss.decimation, _x.sim_sss.max_duration,) = _get_struct_BIBhHf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sim_sss.port_channel = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sim_sss.starboard_channel = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sim_sss.extra_channel = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BIBhHf = None
def _get_struct_BIBhHf():
    global _struct_BIBhHf
    if _struct_BIBhHf is None:
        _struct_BIBhHf = struct.Struct("<BIBhHf")
    return _struct_BIBhHf
